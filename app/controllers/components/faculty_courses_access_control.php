<?phpclass FacultyCoursesAccessControlComponent extends Object {  var $FacultyAcoUser;  var $FacultyAco;    function __construct() {  	$this->FacultyAcoUser = ClassRegistry::init('FacultyAcoUser');  	$this->FacultyAco = ClassRegistry::init('FacultyAco');  }    function grantAccessPermission($facultyAcoId, $userId) {	$data['faculty_aco_id'] = $facultyAcoId;	$data['user_id'] = $userId;	$data['_create'] = 1;	$data['_read'] = 1;	$data['_update'] = 1;	$data['_delete'] = 1;	// Saves only if the parent node has been denied access permission	$parentAccessPermission = $this->_getParentsAccessPermission($facultyAcoId, $userId);	if(!$parentAccessPermission) {	  $this->FacultyAcoUser->save($data);	  return true;	} else {	  return false;	}  }    function denyAccessPermission($facultyAcoId, $userId) {  	$data['faculty_aco_id'] = $facultyAcoId;	$data['user_id'] = $userId;	$data['_create'] = -1;	$data['_read'] = -1;	$data['_update'] = -1;	$data['_delete'] = -1;  	// Save only if it's the highest deny permission	$parentAccessPermission = $this->_getParentsAccessPermission($facultyAcoId, $userId);	if($parentAccessPermission) {	  $this->FacultyAcoUser->save($data);	  return true;	} else {	  return false;	}  }    function _getParentsAccessPermission($childNodeId, $userId) {  	$parentNode = $this->FacultyAco->getparentnode($childNodeId);  	$accessible = null;  	// current childNode is already root; else has parent.  	if(empty($parentNode)) {	  $rootPermission = $this->FacultyAcoUser->getAccessPermissionByFacultyAcoIdUserId($childNodeId, $userId);	  $accessible = ($rootPermission['FacultyAcoUser']['_read'] == 1 ? true : false);  	} else {  	  $parentPermission = $this->FacultyAcoUser->getAccessPermissionByFacultyAcoIdUserId($parentNode['FacultyAco']['id'], $userId);  	  $accessible = ($parentPermission['FacultyAcoUser']['_read'] == 1 ? true : false);   	}  	return $accessible;  }}?>